{
  "rules": [
    {
      "reasoning": "This rule is important because it demonstrates how to define and customize integer columns in a SQLite table using the Drizzle ORM. This flexibility allows developers to handle different data types and operations efficiently, ensuring compatibility and optimal performance in SQLite databases.",
      "ruleFile": "# Rule: Customizing Integer Columns in SQLite with Drizzle ORM\n\n## Description\nThis rule demonstrates how to create and customize integer columns in SQLite tables using the Drizzle ORM. By leveraging different modes, it is possible to store various types of data like numbers, booleans, and timestamps.\n\n## Code Snippet\n```typescript\nimport { integer, sqliteTable } from \"drizzle-orm/sqlite-core\";\n\nconst table = sqliteTable('table', {\n  id: integer()\n});\n\n// you can customize integer mode to be number, boolean, timestamp, timestamp_ms\ninteger({ mode: 'number' })\ninteger({ mode: 'boolean' })\ninteger({ mode: 'timestamp_ms' })\ninteger({ mode: 'timestamp' }) // Date\n```\n\n## Explanation\n- `sqliteTable('table', {...})`: Defines a table named 'table' with specified columns.\n- `integer()`: Creates an integer column by default.\n- `integer({ mode: 'number' })`: Initializes the column in number mode, storing typical numeric values.\n- `integer({ mode: 'boolean' })`: Initializes the column in boolean mode, allowing true/false values.\n- `integer({ mode: 'timestamp_ms' })`: Sets the column to interpret values as timestamps in milliseconds.\n- `integer({ mode: 'timestamp' })`: Allows the column to store Date objects directly.\n\n## Important Notes\n- Ensure that the appropriate mode is selected based on the use case to prevent data misinterpretation.\n- Consider potential performance implications when working with timestamp modes.\n\n## References\n- [Drizzle ORM Documentation](https://drizzle.zhcndoc.com/docs/column-types/sqlite)\n\n## Use Cases\n- Storing user IDs or order numbers using `mode: 'number'`.\n- Saving settings or flags in `mode: 'boolean'`.\n- Logging timestamps for events with `mode: 'timestamp_ms'`.\n- Tracking created or updated times directly using Date objects in `mode: 'timestamp'`.\n",
      "ruleTitle": "Customizing Integer Columns in SQLite with Drizzle ORM"
    },
    {
      "reasoning": "This rule is important because it demonstrates how to define an integer column in an SQLite database table. Understanding column types and their declarations is crucial for designing efficient and correct database schemas.",
      "ruleFile": "# SQLite Column Type: Integer\n\n## Description\nThis code snippet demonstrates how to define a basic table in SQLite with an integer column. Using integer columns is essential for storing numerical data, such as identifiers or counters.\n\n## Code Snippet\n```typescript\nCREATE TABLE `table` (\n  `id` integer\n);\n```\n\n## Explanation\n- **CREATE TABLE**: This command creates a new table in the database.\n- **`id`**: This is the name of the column.\n- **integer**: This is the data type of the column, specifically for storing whole numbers.\n\n## Important Notes\n- SQLite uses dynamic typing, so `integer` can store values as small as 1-byte integers up to 8-byte integers, depending on the value.\n- It's important to define primary keys using integer types to leverage SQLite's auto-increment capability, though `PRIMARY KEY AUTOINCREMENT` is not shown here.\n\n## References\n- [SQLite Data Types Documentation](https://www.sqlite.org/datatype3.html)\n\n## Common Use Cases\n1. Defining unique identifiers for each record in a table.\n2. Storing numerical data such as counters or sequential numbers.\n\n## Variations\n- You can specify an `INTEGER PRIMARY KEY` to automatically increment the `id`.\n```typescript\nCREATE TABLE `table` (\n  `id` integer PRIMARY KEY AUTOINCREMENT\n);\n```\n",
      "ruleTitle": "Defining an Integer Column in SQLite"
    },
    {
      "reasoning": "This rule is important as it demonstrates how to define an auto-incrementing integer primary key in SQLite using Drizzle's TypeScript syntax. This pattern is essential for creating unique identifiers for records in a database table, which is a common necessity in database management.",
      "ruleFile": "# SQLite Auto Increment Integer Primary Key\n\n## Description\nThis code snippet illustrates how to create an integer primary key in SQLite that auto-increments. This is a common pattern for generating unique identifiers for database records automatically.\n\n## Code Snippet\n```typescript\n// to make integer primary key auto increment\ninteger({ mode: 'number' }).primaryKey({ autoIncrement: true })\n```\n\n## Explanation\n- `integer({ mode: 'number' })`: Initializes an integer column with number mode.\n- `.primaryKey({ autoIncrement: true })`: Sets the column as a primary key and enables auto-increment, allowing SQLite to automatically generate a unique incremental integer for each new row.\n\n## Important Notes\n- Auto-increment primary keys are suited for ensuring each row has a unique identifier which is generally used as a reference in other tables.\n- In SQLite, `INTEGER PRIMARY KEY` is a special alias for the rowid, and using `autoIncrement` ensures that this value is automatically incremented with each inserted row.\n\n## Related Concepts\n- [SQLite ROWID](https://www.sqlite.org/lang_createtable.html#rowid)\n- [Primary Keys](https://drizzle.zhcndoc.com/docs/column-types/sqlite)\n\n## Common Use Cases\n- Automatically generating unique identifiers for rows in a user database.\n- Maintaining consistent and unique references in tables that are frequently queried or joined.\n\n## Variations\n- Creating a composite key with an additional column if more complexity is needed in unique identification.",
      "ruleTitle": "Auto-incrementing Integer Primary Key in SQLite"
    },
    {
      "reasoning": "This rule is important because it demonstrates how to define a table with a REAL column type in SQLite using the Drizzle ORM. This is critical for developers who need to handle floating point numbers and integrations with databases using a type-safe approach.",
      "ruleFile": "# SQLite Column Types Using Drizzle ORM\n\n## Overview\n\nThis rule demonstrates how to define and use a REAL column type in an SQLite table using the Drizzle ORM. It is essential to understand how to work with various data types in SQLite to leverage the full potential of the database while maintaining type safety and clarity in TypeScript.\n\n## Code Snippet\n\n```typescript\nimport { real, sqliteTable } from \"drizzle-orm/sqlite-core\";\n\nconst table = sqliteTable('table', {\n  real: real()\n});\n```\n\n## Explanation\n\n- **Import Statements**: The code starts by importing the `real` function and `sqliteTable` from the Drizzle ORM SQLite core package.\n- **Table Definition**: A table is defined with the `sqliteTable()` function, which takes the table name ('table') and an object defining the schema. The `real()` function specifies that the column named 'real' should have the SQLite REAL data type, which is used to store floating-point numbers.\n\n## Important Notes\n\n- **Precision**: REAL types store floating point numbers, which might cause precision issues in certain calculations.\n- **Compatibility**: Always ensure compatibility with the SQLite database version being used, as behavior may differ slightly with different versions.\n\n## References\n\n- [Drizzle ORM SQLite Documentation](https://drizzle.zhcndoc.com/docs/column-types/sqlite)\n- [SQLite Data Types](https://www.sqlite.org/datatype3.html)\n\n## Use Cases and Variations\n\n- **Storing Decimal Numbers**: Use REAL for prices, measurements, or other decimal values where the precision offered by floating point numbers is sufficient.\n- **Alternative Types**: For more precise numeric storage, consider using `integer` for whole numbers or `numeric` for fixed-point arithmetic.\n",
      "ruleTitle": "Defining SQLite REAL Column Types with Drizzle ORM"
    },
    {
      "reasoning": "This rule demonstrates the creation of a table in SQLite using the 'REAL' column type. Understanding how to define column types is crucial for managing data with appropriate precision and performance.",
      "ruleFile": "# Rule: Using SQLite REAL Column Type\n\n## Description\nThis rule demonstrates how to create a table in SQLite with a column of type `REAL`. This column type is used for storing floating-point numbers.\n\n## Code Snippet\n```typescript\nCREATE TABLE `table` (\n  `real` real\n);\n```\n\n## Explanation\n- The `CREATE TABLE` statement initializes a new table named `table`.\n- The column `real` is defined with the `REAL` type, suitable for floating-point numbers.\n\n## Important Notes\n- Use the `REAL` type when you need to store decimal numbers, but be aware of floating-point precision limitations.\n- Avoid using `REAL` for data that requires exact precision, such as currency, which is better stored as `INTEGER` (e.g., storing cents instead of dollars).\n\n## Related Documentation\n- [SQLite Datatypes](https://www.sqlite.org/datatype3.html): This page explains the different column types available in SQLite and their usage.\n\n## Use Cases and Variations\n- **Storing Measurements**: Use `REAL` for measurements where precision is less critical than range, e.g., temperatures, weights.\n- **Scientific Data**: For scientific applications that deal with various scales and require the floating-point format.\n\nVariations could include defining multiple `REAL` columns for different types of measurements or combining `REAL` with other types like `INTEGER` for IDs.\n",
      "ruleTitle": "Defining a 'REAL' Column in SQLite"
    },
    {
      "reasoning": "This rule highlights the use of the Drizzle ORM library for creating and managing SQLite tables with TypeScript. It showcases how to define a table with columns that have specified data types and customizations, such as enumerations and JSON mode. This rule is important for developers who want to leverage TypeScript's typing system for better type safety and readability in database operations with SQLite.",
      "ruleFile": "# Rule: Defining SQLite Column Types using Drizzle ORM\n\n## Description\nThis rule demonstrates how to use the Drizzle ORM library to define SQLite table columns with specific types and modifications. It shows how to set up columns with enumerated values and handle JSON data types effectively.\n\n## Code Snippet\n```typescript\nimport { text, sqliteTable } from \"drizzle-orm/sqlite-core\";\n\nconst table = sqliteTable('table', {\n  text: text()\n});\n\n// will be inferred as text: \"value1\" | \"value2\" | null\ntext({ enum: [\"value1\", \"value2\"] })\ntext({ mode: 'json' })\ntext({ mode: 'json' }).$type<{ foo: string }>()\n```\n\n## Explanation\n- **`sqliteTable`**: This function is used to create a table in SQLite, specifying the table name and its columns.\n- **`text` Column**: The `text` function defines a column with the text data type. It can be customized using options like `enum` and `mode`.\n  - **`enum` Option**: Restricts the column values to specific enumerated strings (e.g., \"value1\", \"value2\") and allows `null`.\n  - **`mode: 'json'`**: Defines the column to store JSON data, enabling the storage of serialized objects in a text field.\n  - **`$type<{ foo: string }>()`**: Specifies the TypeScript type for JSON data to ensure type safety when accessing JSON properties.\n\n## Important Notes\n- Ensure that the database type supports all JSON functionalities when using `mode: 'json'`.\n- Using the `enum` option helps prevent invalid data entry, enhancing data integrity.\n\n## References\n- [Drizzle ORM SQLite Column Types Documentation](https://drizzle.zhcndoc.com/docs/column-types/sqlite)\n\n## Examples\n- **Enumerated Text Column**: Useful for fields with a fixed set of possible values, like status or category.\n- **JSON Text Column**: Ideal for storing configuration data or complex objects without needing a separate relational structure.\n\nThis pattern is especially beneficial when working with dynamic data structures or ensuring data integrity through type restrictions.",
      "ruleTitle": "Defining SQLite Column Types with Drizzle ORM"
    },
    {
      "reasoning": "This rule demonstrates the fundamental process of creating a table with a text column in SQLite using the Drizzle ORM. Understanding how to define column types correctly is important for database integrity and optimized data storage.",
      "ruleFile": "# SQLite Column Types Rule\n\n## Description\nThis rule demonstrates how to create a simple table in SQLite with a column of type `text`. The example uses Drizzle ORM syntax for defining the table structure.\n\n## Code Snippet\n```typescript\nCREATE TABLE `table` (\n  `text` text\n);\n```\n\n## Explanation\nThe code snippet shows the creation of a database table named `table`, with a single column called `text`. The column is explicitly defined with the type `text`, which is suitable for storing string data in SQLite.\n\n## Notes\n- The type `text` in SQLite is used to store character string data. It is important to select the appropriate data type for each column to ensure that the database behaves as expected and remains efficient.\n- SQLite is case-insensitive when it comes to keyword recognition, but it is a good practice to use lowercase for consistency.\n- The use of backticks to enclose table and column names is optional in SQLite but can help avoid conflicts with reserved keywords.\n\n## References\n- [SQLite Data Types Documentation](https://www.sqlite.org/datatype3.html)\n- [Drizzle ORM Documentation](https://drizzle.zhcndoc.com/docs/column-types/sqlite)\n\n## Common Use Cases\n- Defining a text column for storing user-input data like names, comments, or descriptions.\n- Using text types for search fields or storing JSON-serialized objects as strings.\n\n## Variations\n- **Using Different Column Names:** You can replace `text` with any appropriate column name as needed.\n- **Additional Columns:** Add more columns of different types to accommodate various data requirements such as integers or real numbers.",
      "ruleTitle": "Creating a Text Column in SQLite with Drizzle ORM"
    },
    {
      "reasoning": "This rule is important because it demonstrates how to define and manipulate blob columns in a SQLite database using Drizzle ORM. Understanding the different modes of blob storage and how to define custom types is crucial for effectively using SQLite for a wide range of applications that require binary data handling.",
      "ruleFile": "# Rule: Defining and Manipulating Blob Columns in SQLite using Drizzle ORM\n\n## Description\nThis code snippet demonstrates how to define blob columns in a SQLite database using Drizzle ORM. It shows various ways to configure blob columns, highlighting the flexibility offered by the library.\n\n## Code Snippet\n```typescript\nimport { blob, sqliteTable } from \"drizzle-orm/sqlite-core\";\n\nconst table = sqliteTable('table', {\n  blob: blob()\n});\n\nblob()\nblob({ mode: 'buffer' })\nblob({ mode: 'bigint' })\n\nblob({ mode: 'json' })\nblob({ mode: 'json' }).$type<{ foo: string }>()\n```\n\n## Explanation\n- **Definition of Blob Column**: The `blob()` function is used to create a blob column in a SQLite table.\n- **Modes of Blob Storage**:\n  - `blob()`: Default blob configuration.\n  - `blob({ mode: 'buffer' })`: Stores the blob as a buffer.\n  - `blob({ mode: 'bigint' })`: Assumes the blob data can be represented as a bigint.\n  - `blob({ mode: 'json' })`: Interprets the blob data as JSON.\n- **Custom Type Definition**: The `$type` method allows for specifying a custom TypeScript type for the JSON blob, enhancing type safety and readability.\n\n## Important Notes\n- Ensure that the Drizzle ORM library is correctly installed and configured in your TypeScript project before using these features.\n- Be aware of the database's storage limitations and performance considerations when using blobs, especially for large data.\n\n## References\n- [Drizzle ORM SQLite Documentation](https://drizzle.zhcndoc.com/docs/column-types/sqlite)\n- [Blob Data Type in SQLite](https://www.sqlite.org/datatype3.html)\n\n## Common Use Cases\n- Storing binary files such as images or documents directly in the database.\n- Encoding structured data as JSON for storage in a blob column.\n- Applications requiring type-safe interactions with binary data through TypeScript.\n\nBy following this rule, developers can effectively leverage SQLite's support for binary data using Drizzle ORM, ensuring optimal application performance and maintainability.",
      "ruleTitle": "Handling Blob Columns in SQLite with Drizzle ORM"
    },
    {
      "reasoning": "This rule is important as it highlights the use of the BLOB data type in SQLite, showcasing how to store binary data like images or files efficiently within a database. Understanding this allows developers to manage and persist complex data structures directly in their SQL databases.",
      "ruleFile": "# Using BLOB in SQLite\n\n## Description\nThis rule demonstrates how to define a column of type BLOB in an SQLite database table. BLOB (Binary Large Object) is used to store binary data such as images, audio, or any other type of files.\n\n## Code Snippet\n```typescript\nCREATE TABLE `table` (\n  `blob` blob\n);\n```\n\n## Explanation\nThe code snippet creates a table with a single column named `blob` of type BLOB. BLOB columns are designed to store large amounts of binary data. This is particularly useful when the data does not fit traditional textual data types.\n\n## Important Notes\n- BLOB fields can store data up to 2GB in size, but the actual limit may depend on the SQLite implementation and configuration.\n- Ensure that your application logic handles BLOB data efficiently to avoid memory issues.\n\n## Related Documentation\n- [SQLite Data Types](https://www.sqlite.org/datatype3.html)\n- [Drizzle SQLite Column Types](https://drizzle.zhcndoc.com/docs/column-types/sqlite)\n\n## Common Use Cases and Variations\n- Storing image files in a photo gallery app\n- Saving serialized objects for caching complex data structures\n- Storing audio files or other multimedia content\n\n### Variations\n- Create a table with multiple BLOBs:\n```typescript\nCREATE TABLE `multimedia` (\n  `image` blob,\n  `audio` blob,\n  `video` blob\n);\n```\n- Use alongside other data types:\n```typescript\nCREATE TABLE `content` (\n  `id` INTEGER PRIMARY KEY,\n  `name` TEXT,\n  `data` blob\n);\n```\n",
      "ruleTitle": "Defining and Using BLOB Data Types in SQLite"
    },
    {
      "reasoning": "This rule demonstrates how to define a boolean column in an SQLite table using Drizzle ORM by specifying the integer type with a mode of 'boolean'. It showcases a method to handle boolean data types in SQLite, which natively does not have a dedicated boolean type.",
      "ruleFile": "# Rule: Defining Boolean Columns in SQLite with Drizzle ORM\n\n## Description\nThis rule demonstrates how to define a boolean column in an SQLite table using Drizzle ORM. SQLite does not support a native boolean type, so this pattern shows how to use integers to represent boolean values.\n\n## Code Snippet\n```typescript\nimport { integer, sqliteTable } from \"drizzle-orm/sqlite-core\";\n\nconst table = sqliteTable('table', {\n  id: integer({ mode: 'boolean' })\n});\n```\n\n## Explanation\n- **sqliteTable**: This function is used to define a new table within the SQLite database.\n- **integer({ mode: 'boolean' })**: This configuration sets up an integer column that is used to store boolean values (commonly 0 for false and 1 for true).\n\n## Important Notes\n- SQLite does not have a dedicated boolean type; using integers is a common workaround.\n- Ensure consistency in how boolean values are stored across your database schema.\n\n## References\n- [Drizzle ORM SQLite Documentation](https://drizzle.zhcndoc.com/docs/column-types/sqlite)\n\n## Common Use Cases\n- Storing boolean flags or status indicators in a SQLite database.\n- Representing yes/no or true/false states when dealing with SQLite tables.\n\n## Variations\nInstead of directly using integers, another approach can be mapping strings 'true' and 'false' to integers when reading and writing from the database, though this is less efficient.\n",
      "ruleTitle": "Defining Boolean Columns in SQLite with Drizzle ORM"
    },
    {
      "reasoning": "This rule demonstrates how to use the 'blob' data type with a 'bigint' mode in a Drizzle ORM SQLite setup. It highlights the flexibility of handling binary large objects within a database table, ensuring developers understand how to define and manipulate binary data effectively.",
      "ruleFile": "# Drizzle ORM SQLite: Handling BLOB with 'bigint' Mode\n\n## Description\nThis rule demonstrates how to define a column using the `blob` type with a 'bigint' mode in a table managed by Drizzle ORM for SQLite databases. This setup is essential for efficiently handling binary data like images, documents, or large integers stored in binary format.\n\n## Code Snippet\n```typescript\nimport { blob, sqliteTable } from \"drizzle-orm/sqlite-core\";\n\nconst table = sqliteTable('table', {\n  id: blob({ mode: 'bigint' })\n});\n```\n\n## Explanation\n- **Import Statements**: The code imports the `blob` type and `sqliteTable` function from the `drizzle-orm/sqlite-core` package.\n- **Table Definition**: The `sqliteTable` function is used to define a new table named `table`.\n- **Column Definition**: The `id` column is defined as a `blob` with `{ mode: 'bigint' }`. This means that the column will store binary data intended to represent large integers.\n\n## Important Notes\n- **BLOB Usage**: Using a BLOB is ideal for any binary data storage necessary for the application, such as storing images, files, or large integer values.\n- **Performance Considerations**: Be aware of potential performance implications when storing large BLOBs, and ensure that your database and application architecture can handle such payloads efficiently.\n\n## References\n- [SQLite Documentation on BLOBs](https://www.sqlite.org/datatype3.html)\n- [Drizzle ORM SQLite Documentation](https://drizzle.zhcndoc.com/docs/column-types/sqlite)\n\n## Common Use Cases\n- Storing large integer values as BLOBs when precision or size surpasses the capabilities of standard integer data types.\n- Saving binary large objects such as images, audio files, or documents in a database table for easy retrieval and processing.\n\n## Variations\n- Using other modes or configurations with BLOB data types to accommodate different binary storage needs, such as handling different file types or encryption requirements.",
      "ruleTitle": "Handling BLOB Data Types with 'bigint' Mode in Drizzle ORM for SQLite"
    },
    {
      "reasoning": "This rule is important because it demonstrates the use of the `BLOB` type in SQLite, highlighting how SQLite's dynamic typing allows for flexible data storage. It showcases a fundamental understanding of how to define columns in SQLite tables and utilize compound data types.",
      "ruleFile": "# SQLite BLOB Column Type\n\n## Description\nThis rule demonstrates how to define a column using the `BLOB` type in SQLite. BLOB, which stands for Binary Large Object, is a versatile data type that allows for the storage of large binary data, such as images or multimedia files, directly in the database table.\n\n## Code Snippet\n```typescript\nCREATE TABLE `table` (\n  `id` blob\n);\n```\n\n## Explanation\n- **Table Creation**: The snippet creates a table named `table` with a single column `id`.\n- **Column Type**: The `id` column is defined with the `BLOB` data type, which is suitable for storing binary data.\n- **Flexibility**: SQLite's dynamic typing system allows `BLOB` fields to store any type of data, making them useful for diverse applications.\n\n## Important Notes\n- **Storage Considerations**: BLOBs can consume significant storage space, which might affect database performance if not managed properly.\n- **Data Handling**: Careful handling of binary data is necessary to ensure data integrity and efficient retrieval.\n\n## References\n- [SQLite Data Types](https://sqlite.org/datatype3.html) for a comprehensive overview of SQLite's data types.\n\n## Use Cases\n- **Storing Images**: Use BLOBs for storing image files directly within a database.\n- **Multimedia Storage**: Suitable for video or audio files that need to be stored along with other data in a database entry.\n- **Document Archiving**: Ideal for applications that require the archiving of various types of documents.\n\nConsider exploring variations, such as combining BLOB with other column types to handle complex data structures.",
      "ruleTitle": "Using BLOB Column Type in SQLite Tables"
    },
    {
      "reasoning": "This rule is important because it demonstrates how to define a SQLite table with different numeric column types using Drizzle ORM. It highlights the flexibility and clarity provided by Drizzle's type definitions, which improve type safety and the accuracy of SQL operations in a TypeScript environment.",
      "ruleFile": "# SQLite Column Types with Drizzle ORM\n\nThis document demonstrates how to define various numeric column types in a SQLite table using Drizzle ORM in a TypeScript environment.\n\n## Code Snippet\n\n```typescript\nimport { blob, sqliteTable } from \"drizzle-orm/sqlite-core\";\n\nconst table = sqliteTable('table', {\n  numeric: numeric(),\n  numericNum: numeric({ mode: 'number' }),\n  numericBig: numeric({ mode: 'bigint' }),\n});\n```\n\n## Explanation\n\nThis code snippet shows how to create a SQLite table with columns that use different numeric types controlled by Drizzle ORM. Here's a breakdown of the column definitions:\n\n- `numeric`: Defaults to a general numeric type.\n- `numericNum`: Specifies numeric type in `number` mode, implying traditional floating-point or fixed-point arithmetic.\n- `numericBig`: Specifies numeric type in `bigint` mode, which is optimal for very large numbers that require precise integer arithmetic.\n\n## Important Notes\n- **Type Safety**: Using specific modes like 'number' and 'bigint' enhances type safety, preventing potential errors in handling numerics.\n- **Compatibility**: Ensure your TypeScript environment is properly set up to utilize Drizzle ORM.\n\n## Related Documentation\n- [Drizzle ORM SQLite Column Types](https://drizzle.zhcndoc.com/docs/column-types/sqlite)\n- [Drizzle ORM GitHub Repository](https://github.com/drizzle-team/drizzle)\n\n## Use Cases and Variations\n- Defining columns for a finance application where precision in decimal and integer operations is crucial.\n- Creating tables for scientific data storage, utilizing large integer columns for massive datasets or identifiers.",
      "ruleTitle": "Defining Numeric Column Types in SQLite with Drizzle ORM"
    },
    {
      "reasoning": "This rule highlights the use of the 'numeric' column type in SQLite, which is important for defining columns that can store numbers, allowing for flexibility and precision in data storage. It demonstrates how to declare multiple columns with the same data type in a table.",
      "ruleFile": "# SQLite Column Types: Numeric\n\n## Description\nThis document demonstrates how to define columns with the 'numeric' type in SQLite. The 'numeric' type is versatile, allowing for flexible storage and operation on numeric data within a table.\n\n## Code Snippet\n```typescript\nCREATE TABLE `table` (\n  `numeric` numeric,\n  `numericNum` numeric,\n  `numericBig` numeric,\n);\n```\n\n## Explanation\nThe code snippet creates a table named `table` with three columns, each using the 'numeric' type. The 'numeric' type is one of the supported storage types in SQLite, which can store any type of numeric data. It can auto-convert the stored data between integer and floating-point numbers based on need.\n\n## Important Notes\n- SQLite uses dynamic typing. The 'numeric' storage class can store values as an integer, floating point, or text, depending on the value.\n- While flexible, this can lead to unexpected results; it's crucial to ensure stored values are in the intended format.\n\n## References\n- [SQLite Data Types](https://www.sqlite.org/datatype3.html)\n- [Drizzle SQLite Column Types](https://drizzle.zhcndoc.com/docs/column-types/sqlite)\n\n## Common Use Cases\n- Storing dynamic numeric data where precision and format may vary.\n- Situations requiring data operations that involve various numeric types.\n\n## Variations\nOther related column types include 'integer', 'real', and 'text', which may be used depending on the specific needs concerning precision and performance.",
      "ruleTitle": "Defining Columns with Numeric Type in SQLite"
    },
    {
      "reasoning": "This rule demonstrates best practices for defining strongly typed columns in a SQLite table using Drizzle. By employing TypeScript's `& { __brand: 'custom_type' }` pattern for unique identifiers, such as `UserId`, and custom types for fields like JSON, developers can leverage TypeScript's type system to ensure type safety and prevent assignment of incorrect types. This pattern also showcases how database schema definitions can be enhanced with type information that guides development and reduces runtime errors.",
      "ruleFile": "# SQLite Column Types in Drizzle\n\n## Overview\n\nThis rule demonstrates how to define columns in a SQLite table using Drizzle, with a focus on type safety and structured data. By utilizing TypeScript's branding and type inference features, developers can enhance schema definitions and ensure consistency across their applications.\n\n## Code Snippet\n\n```typescript\ntype UserId = number & { __brand: 'user_id' };\ntype Data = {\n  foo: string;\n  bar: number;\n};\n\nconst users = sqliteTable('users', {\n  id: integer().$type<UserId>().primaryKey(),\n  jsonField: blob().$type<Data>(),\n});\n```\n\n## How it Works\n\n- **Branded Types**: The `UserId` type is defined using a TypeScript intersection type with a brand property. This ensures that only values explicitly marked as `UserId` can be assigned to it, promoting type safety.\n- **Structured Data with JSON**: The `jsonField` column is declared as a blob, with a custom type `Data` that specifies its structure. This approach allows developers to enforce a specific structure for JSON data stored in the database.\n- **Type Inference**: Drizzle leverages TypeScript's `$type` method to associate these custom types with database columns, ensuring that operations on these columns respect the defined types.\n\n## Important Notes\n\n- **Branding Limitation**: Note that TypeScript's branding pattern is a compile-time construct and doesn’t enforce constraints at runtime.\n- **JSON Handling**: Storing JSON data as a blob requires careful handling. Ensure that JSON is correctly serialized and deserialized when interacting with the database.\n\n## References\n\n- [SQLite Column Types Documentation](https://drizzle.zhcndoc.com/docs/column-types/sqlite)\n- [TypeScript Intersection Types](https://www.typescriptlang.org/docs/handbook/unions-and-intersections.html)\n\n## Use Cases\n\n- Defining primary keys with unique types to avoid assignment errors.\n- Enforcing structure for JSON fields in SQLite, enhancing data integrity and simplifying querying logic.\n\nBy following this rule, developers can create robust and maintainable database schemas that leverage TypeScript's strengths to prevent common runtime errors and improve developer productivity.",
      "ruleTitle": "Type-Safe SQLite Column Definitions with Drizzle"
    },
    {
      "reasoning": "This rule highlights how to define a non-nullable integer column in a SQLite table using Drizzle ORM. It demonstrates the importance of ensuring data integrity by preventing null values in columns that require mandatory information.",
      "ruleFile": "# SQLite Integer Column Definition with Drizzle ORM\n\n## Description\nThis rule demonstrates how to define a non-nullable integer column in a SQLite table using Drizzle ORM. This practice is crucial to enforce data integrity by ensuring that critical fields receive valid integer inputs and do not have null values.\n\n## Code Snippet\n```typescript\nconst table = sqliteTable('table', { \n  numInt: integer().notNull() \n});\n```\n\n## Explanation\n- **`sqliteTable`**: A function to define a new SQLite table.\n- **`numInt`**: The name of the column, indicating it stores numerical integer values.\n- **`integer()`**: Specifies that the column type is `INTEGER`, a built-in type in SQLite.\n- **`notNull()`**: Ensures that the `numInt` column cannot have `NULL` values, forcing data input for every row in the table.\n\n## Important Notes\n- **Data Integrity**: Using `notNull()` helps maintain data integrity by preventing `NULL` entries in essential columns.\n- Always ensure that your ORM or database driver is correctly set up to support type definitions and constraints.\n\n## Related Documentation\n- [Drizzle SQLite Documentation](https://drizzle.zhcndoc.com/docs/column-types/sqlite)\n- [SQLite Data Types](https://sqlite.org/datatype3.html)\n\n## Common Use Cases\n- Defining columns in user tables where IDs or other numerical identifiers must always be present.\n- Ensuring that financial transactions have valid amounts without null entries.\n\n\n## Variations\n- Defining other non-nullable types, such as `text().notNull()` for string values.\n\n```typescript\nconst table = sqliteTable('user', {\n  username: text().notNull()\n});\n```\n",
      "ruleTitle": "Defining Non-Nullable Integer Columns in SQLite Tables Using Drizzle ORM"
    },
    {
      "reasoning": "This rule is important because it demonstrates how to define an integer column in an SQLite table using Drizzle. Understanding how to set constraints like NOT NULL is crucial for data integrity, ensuring that every entry in the column must have a value.",
      "ruleFile": "# SQLite Column Types\n\n## Defining Integer Columns with NOT NULL Constraint\n\nThis rule demonstrates how to create a table with an integer column using SQLite's data type conventions. Specifically, it shows how to set a NOT NULL constraint to ensure data integrity.\n\n### Code Snippet\n\n```typescript\nCREATE TABLE table (\n  `numInt` integer NOT NULL\n);\n```\n\n### Explanation\n\n- `CREATE TABLE table`: This statement initializes a new table named `table`.\n- `` `numInt` integer NOT NULL ``: Defines a column named `numInt` as an integer. The `NOT NULL` constraint ensures that this column cannot contain NULL values, meaning every entry must have a valid integer.\n\n### Important Notes\n- Using `integer` in SQLite allows for a flexible range of numeric types, including 1-byte, 2-byte, 4-byte, and 8-byte signed integers.\n- The `NOT NULL` constraint is essential for ensuring that crucial values are always present, preventing incomplete or corrupted data entries.\n\n### Related Documentation\n- [SQLite Data Types](https://www.sqlite.org/datatype3.html)\n- [Drizzle SQLite Column Types Documentation](https://drizzle.zhcndoc.com/docs/column-types/sqlite)\n\n### Common Use Cases\n- Enforcing mandatory fields such as IDs or timestamps where null values would be unacceptable.\n- Ensuring data consistency in applications requiring precise data input.\n\nVariations of this pattern could include using different constraints like `DEFAULT` values or `UNIQUE` constraints to further refine data integrity rules.",
      "ruleTitle": "Defining NOT NULL Integer Columns in SQLite"
    },
    {
      "reasoning": "This rule is important as it illustrates how to define default values for columns in a SQLite table using Drizzle ORM. It demonstrates two methods: using a constant value and using a SQL expression. Understanding these methods is crucial for setting default behaviors in database applications, ensuring that tables have meaningful default data, and leveraging SQL functions for dynamic defaults.",
      "ruleFile": "# SQLite Column Default Values with Drizzle ORM\n\nThis rule demonstrates how to define default values for columns in a SQLite table using Drizzle ORM. It covers the use of both constant values and SQL expressions.\n\n## Code Snippet\n\n```typescript\nimport { sql } from \"drizzle-orm\";\nimport { integer, sqliteTable } from \"drizzle-orm/sqlite-core\";\n\nconst table = sqliteTable('table', {\n  int1: integer().default(42),\n  int2: integer().default(sql`(abs(42))`)\n});\n```\n\n## Explanation\n\n- **Constant Default Value:** The `int1` column is defined with a default value of `42`. This is a straightforward method where a constant is assigned as the default.\n\n- **SQL Expression as Default Value:** The `int2` column uses a SQL expression `sql` to compute its default value. This allows for dynamic default values using SQLite functions or operations, providing more flexibility.\n\n## Important Notes\n\n- **Type Safety:** Ensure that the default value matches the column type to prevent runtime errors.\n\n- **Performance Considerations:** While using SQL expressions for defaults can be powerful, it may have performance implications depending on the complexity of the expressions.\n\n- **Database Compatibility:** This pattern is SQLite-specific; check compatibility if migrating to another database system.\n\n## References\n\n- [Drizzle ORM Documentation](https://drizzle.zhcndoc.com/docs/)\n- [SQLite Column Types](https://drizzle.zhcndoc.com/docs/column-types/sqlite)\n\n## Common Use Cases\n\n- **Setting Default Numeric Values:** Use constant defaults for columns where a common numeric value is expected.\n- **Dynamic Defaults:** Use SQL expressions to calculate defaults based on other parameters or conditions, such as timestamps or computed averages.\n\nBy understanding these methods, developers can make informed decisions on how to initialize database columns effectively.",
      "ruleTitle": "Defining Default Values for SQLite Columns Using Drizzle ORM"
    },
    {
      "reasoning": "This rule is important for understanding the use of default values in SQLite column definitions, showcasing both static and dynamic defaults. It demonstrates how to set a column with a constant default value and another with a computed default using a function.",
      "ruleFile": "# Rule: Default Values in SQLite Columns\n\n## Description\nThis code snippet demonstrates how to define default values for columns in an SQLite table. It includes both a static default value and a dynamic default value using a function.\n\n## Code Snippet\n```typescript\nCREATE TABLE `table` (\n  `int1` integer DEFAULT 42,\n  `int2` integer DEFAULT (abs(42))\n);\n```\n\n## Explanation\n- **`int1 integer DEFAULT 42`**: This defines a column `int1` with an integer data type and a static default value of 42.\n- **`int2 integer DEFAULT (abs(42))`**: This defines a column `int2` with an integer data type and a dynamic default value. The default is computed using the `abs()` function applied to 42. \n\n## Important Notes\n- Default values are used when an `INSERT` statement does not provide a value for the column.\n- Dynamic defaults like the use of functions can provide flexibility but may have performance implications.\n\n## References\n- [SQLite Column Types Documentation](https://drizzle.zhcndoc.com/docs/column-types/sqlite)\n\n## Common Use Cases\n- **Static Defaults**: When a consistent value is often used, such as setting a default user role or status.\n- **Dynamic Defaults**: When the default needs to be calculated, such as timestamping with the current date or applying a function to another column.",
      "ruleTitle": "Using Default Values in SQLite Columns"
    },
    {
      "reasoning": "This rule is important because it illustrates the use of default values for date and time columns in SQLite using Drizzle ORM. It demonstrates how to set default SQL expressions for fields, ensuring that each new entry gets assigned the current date and time automatically, which is crucial for applications needing timestamped records.",
      "ruleFile": "# Using Default Date and Time in SQLite with Drizzle ORM\n\n## Description\nThis code snippet demonstrates how to define a table in SQLite using Drizzle ORM, where specific columns are automatically set to the current date and time using SQLite's built-in functions.\n\n## Code Snippet\n```typescript\nimport { sql } from \"drizzle-orm\";\nimport { text, sqliteTable } from \"drizzle-orm/sqlite-core\";\n\nconst table = sqliteTable(\"table\", {\n  time: text().default(sql`(CURRENT_TIME)`),\n  date: text().default(sql`(CURRENT_DATE)`),\n  timestamp: text().default(sql`(CURRENT_TIMESTAMP)`),\n});\n```\n\n## How It Works\n- **`CURRENT_TIME`**, **`CURRENT_DATE`**, and **`CURRENT_TIMESTAMP`** are SQL functions that return the current time, date, and timestamp respectively. When a new record is inserted into the table, these functions automatically set the column values.\n- The `text()` function is used to define the column type as text in SQLite. Although SQLite is type-flexible, using `text` ensures consistency for date and time values.\n- `default(sql...)` allows setting a default SQL expression for a column, meaning each insertion defaults to the current time or date unless specified otherwise.\n\n## Important Notes\n- Make sure the database connection is correctly configured to respect SQLite's native functions.\n- Default expressions like this are evaluated at the time of insertion.\n\n## References\n- [SQLite Column Types](https://drizzle.zhcndoc.com/docs/column-types/sqlite)\n- [SQLite Date and Time functions](https://www.sqlite.org/lang_datefunc.html)\n\n## Use Cases\n- Automatically timestamping records for audit trails or logs.\n- Efficiently setting the default timezone information.\n- Simplifying code by reducing the need to manually insert timestamps.",
      "ruleTitle": "Automating Date and Time Defaults in SQLite with Drizzle ORM"
    },
    {
      "reasoning": "This rule is important as it demonstrates how to set default date and time in SQLite tables using text data types. It ensures that the fields automatically capture the current date and time when a new record is inserted, which is crucial for logging and tracking modifications.",
      "ruleFile": "# Rule: Default Date and Time in SQLite Tables\n\n## Description\nThis rule demonstrates how to create SQLite tables with columns that have default values for the current time, date, and timestamp using text data types. It is useful for automatically capturing when records are created.\n\n## Code Snippet\n```typescript\nCREATE TABLE `table` (\n  `time` text DEFAULT (CURRENT_TIME),\n  `date` text DEFAULT (CURRENT_DATE),\n  `timestamp` text DEFAULT (CURRENT_TIMESTAMP)\n);\n```\n\n## Explanation\n- **`time` column**: This column defaults to the current time when a record is inserted, using the `CURRENT_TIME` function.\n- **`date` column**: This column defaults to the current date, using the `CURRENT_DATE` function.\n- **`timestamp` column**: This column captures both date and time at the moment of insertion, using the `CURRENT_TIMESTAMP` function.\n\nThese columns are defined with the `text` type to store the date and time data as strings in SQLite.\n\n## Important Notes\n- SQLite stores date and time as strings, which means the operations on such fields might require conversions if needed in different formats.\n- Ensure that the server's time zone is correctly set, as the date and time functions rely on this setting.\n\n## References\n- [SQLite Date and Time Functions](https://www.sqlite.org/lang_datefunc.html)\n- [Drizzle SQLite Column Types Documentation](https://drizzle.zhcndoc.com/docs/column-types/sqlite)\n\n## Use Cases\n- Time-stamping records when they are created for auditing or logging purposes.\n- Creating modification logs for changes in a database.\n\n### Variations\n- Using different default functions or formats for special use cases, such as including/excluding specific time components.",
      "ruleTitle": "Default Date and Time in SQLite Tables"
    },
    {
      "reasoning": "This rule is important as it demonstrates how to define a default value generation for a SQLite table column using Drizzle ORM. It showcases the usage of custom functions to automatically assign values, which can be particularly useful for unique identifiers.",
      "ruleFile": "# Using Default Functions in SQLite Column Definitions\n\n## Description\nThis code snippet demonstrates how to set up a SQLite table with a default function for generating values for a column using Drizzle ORM.\n\n## Code Snippet\n```typescript\nimport { text, sqliteTable } from \"drizzle-orm/sqlite-core\";\nimport { createId } from '@paralleldrive/cuid2';\n\nconst table = sqliteTable('table', {\n  id: text().$defaultFn(() => createId()),\n});\n```\n\n## Explanation\n- **Import Statements**: The code imports necessary functions from 'drizzle-orm/sqlite-core' and '@paralleldrive/cuid2'.\n- **sqliteTable Function**: Used to define a new SQLite table named 'table'.\n- **Column Definition**: The `id` column is of type `text`, with a default function that generates a unique identifier using `createId()`.\n\n## Important Notes\n- The use of `defaultFn` allows automatic assignment of values, reducing manual entry errors.\n- Ensure the `@paralleldrive/cuid2` library is installed and properly configured in your environment, as it provides the `createId()` function.\n\n## References\n- [Drizzle ORM Documentation](https://drizzle.zhcndoc.com/docs)\n- [cuid2 Documentation](https://www.npmjs.com/package/@paralleldrive/cuid2)\n\n## Common Use Cases\n- **Unique Identifier Generation**: Automatically generate unique IDs for primary keys.\n- **Timestamp Assignment**: Use for default timestamps in records.\n\n## Variations\n- **UUIDs**: Use UUID libraries for ID generation instead of `cuid2`.\n- **Default Boolean/Integer Values**: Define other default values such as `boolean().$default(true)` or `integer().$default(0)`.",
      "ruleTitle": "Setting Default Functions for SQLite Columns with Drizzle ORM"
    },
    {
      "reasoning": "This rule is important because it demonstrates how to define a column in an SQLite table using Drizzle ORM that is always null. This pattern is essential for ensuring that certain fields are initialized or updated with a null value, which can be useful in specific database operations or logic implementations.",
      "ruleFile": "# SQLite Column with Always Null Value\n\n## What This Code Snippet Demonstrates\n\nThis code snippet illustrates how to define a column in an SQLite table using Drizzle ORM that will always hold a null value whenever it's updated.\n\n## Code Snippet\n\n```typescript\nimport { text, sqliteTable } from \"drizzle-orm/sqlite-core\";\n\nconst table = sqliteTable('table', {\n    alwaysNull: text().$type<string | null>().$onUpdate(() => null),\n});\n```\n\n## Explanation\n\n- **Importing Modules**: The snippet imports `text` and `sqliteTable` from the Drizzle ORM core for SQLite, which are essential for defining a table structure.\n- **Table Definition**: The `sqliteTable` function defines a new table with a column named `alwaysNull`.\n- **Column Type**: The column uses the `text()` method to specify a text type, but it is also set up to potentially accept `null` values by chaining the `$type<string | null>()` method.\n- **Update Logic**: The `$onUpdate(() => null)` method ensures that whenever a record in this table is updated, this specific column will automatically be set to null.\n\n## Important Notes or Warnings\n\n- This pattern should be used carefully as forcing a column to always remain null could lead to data consistency issues if not properly justified by the application logic.\n- Ensure that this behavior is aligned with the rest of the application to prevent unexpected data loss.\n\n## References\n\n- [Drizzle ORM Documentation](https://drizzle.zhcndoc.com/docs/column-types/sqlite)\n\n## Common Use Cases or Variations\n\n- **Audit Trails**: Use in scenarios where nullifying a field signifies the completion or invalidation of a record.\n- **Data Privacy**: Automatically nullify sensitive fields after use.\n\nThis rule demonstrates a specific use of Drizzle ORM column configuration for SQLite, highlighting an advanced pattern useful in specialized database management scenarios.",
      "ruleTitle": "Always Null Column in SQLite with Drizzle ORM"
    },
    {
      "reasoning": "This rule demonstrates how to establish a connection to an SQLite database using the Drizzle ORM with Expo. Understanding how to set up this connection is crucial for developers who need to interact with a local SQLite database in a React Native application. This pattern simplifies database operations, facilitating efficient data management and retrieval.",
      "ruleFile": "# Rule Title: Establishing an SQLite Connection with Drizzle ORM and Expo\n\n## Description\nThis code snippet demonstrates how to establish a connection to an SQLite database using Drizzle ORM and Expo in a React Native environment.\n\n## Code Snippet\n```typescript\nimport { drizzle } from \"drizzle-orm/expo-sqlite\";\nimport { openDatabaseSync } from \"expo-sqlite/next\";\n\nconst expo = openDatabaseSync(\"db.db\");\nconst db = drizzle(expo);\n```\n\n## Explanation\n- `import { drizzle } from \"drizzle-orm/expo-sqlite\";`: This imports the `drizzle` function from the Drizzle ORM package, which is tailored to work with Expo.\n- `import { openDatabaseSync } from \"expo-sqlite/next\";`: This line imports the `openDatabaseSync` function from the `expo-sqlite` package, allowing for synchronous database connection creation.\n- `const expo = openDatabaseSync(\"db.db\");`: This initializes a connection to the local SQLite database named `db.db`. It establishes a bridge between the React Native app and the database.\n- `const db = drizzle(expo);`: This wraps the SQLite connection with Drizzle ORM, enabling the use of ORM functionalities for managing the database.\n\n## Important Notes\n- Ensure that the `drizzle-orm` and `expo-sqlite` packages are installed and properly configured in your project.\n- This pattern is specific to environments where Expo is used as part of React Native applications.\n\n## References\n- [Drizzle ORM Documentation](https://drizzle.zhcndoc.com/docs/connect-overview)\n- [Expo SQLite Documentation](https://docs.expo.dev/versions/latest/sdk/sqlite/)\n\n## Common Use Cases\n- Setting up a new project that requires data persistence with SQLite in a React Native application.\n- Migrating existing SQLite querying logic to use ORM patterns with Drizzle for better maintainability and scalability.\n- Developing offline-first mobile applications that need efficient local data storage.",
      "ruleTitle": "Establishing an SQLite Connection with Drizzle ORM and Expo"
    },
    {
      "reasoning": "This rule demonstrates how to set up and initialize a SQLite database connection using Drizzle ORM in an existing TypeScript project. It is crucial for developers who want to leverage Drizzle ORM as their database abstraction layer, allowing for type-safe and maintainable database operations.",
      "ruleFile": "# Setting Up Drizzle ORM with SQLite\n\nThis rule explains how to initialize a SQLite database using Drizzle ORM in a TypeScript project.\n\n## Code Snippet\n\n```typescript\nimport 'dotenv/config';\nimport { drizzle } from 'drizzle-orm/libsql';\n\nconst db = drizzle(process.env.DB_FILE_NAME!);\n```\n\n## Explanation\n\n- **Import Environment Variables:** The snippet imports environment variables using `dotenv`. This allows you to use environment variables stored in a `.env` file, which is a common practice for managing configuration settings, such as database connection details.\n\n- **Drizzle ORM Import:** The code imports the `drizzle` function from the `drizzle-orm/libsql` package. Drizzle ORM is a lightweight ORM that provides a simple API for interacting with databases.\n\n- **Database Initialization:** The `drizzle` function initializes a connection to the SQLite database using the file name specified in the `DB_FILE_NAME` environment variable.\n\n## Important Notes\n\n- **Environment Variables:** Ensure that the `.env` file is properly configured and contains the necessary variables, like `DB_FILE_NAME` pointing to the correct SQLite database file.\n\n- **Error Handling:** Consider wrapping the database initialization in a try-catch block to handle possible errors gracefully.\n\n## References\n\n- [Drizzle ORM Documentation](https://orm.drizzle.team/docs)\n- [dotenv Package Documentation](https://www.npmjs.com/package/dotenv)\n\n## Common Use Cases and Variations\n\n- **Using Different SQLite Files:** You can switch between different SQLite databases by changing the `DB_FILE_NAME` value in the `.env` file.\n\n- **Integration with Express:** Use the initialized `db` object with Express.js for handling route-based database interactions.\n\n- **TypeScript Type Safety:** Extend this pattern by defining models that provide full TypeScript support and type safety for database operations.",
      "ruleTitle": "Initializing SQLite with Drizzle ORM in TypeScript Projects"
    },
    {
      "reasoning": "This rule demonstrates how to connect to a SQLite database using Drizzle ORM in a TypeScript project. It highlights the setup process, including importing required libraries, configuring the database client, and establishing a connection. Understanding this pattern is crucial for effectively using Drizzle ORM with SQLite, ensuring a streamlined database integration.",
      "ruleFile": "## Connecting to SQLite with Drizzle ORM\n\nThis guide demonstrates how to connect to a SQLite database using Drizzle ORM in an existing TypeScript project.\n\n### Code Snippet\n\n```typescript\nimport 'dotenv/config';\nimport { drizzle } from 'drizzle-orm/libsql';\nimport { createClient } from '@libsql/client';\n\nconst client = createClient({ url: process.env.DB_FILE_NAME! });\nconst db = drizzle({ client });\n```\n\n### Explanation\n\n1. **Environment Configuration**: The code begins by importing environment variables with `dotenv/config`, ensuring that sensitive information like the database file name is managed securely.\n\n2. **Library Imports**: The `drizzle` and `createClient` functions are imported from their respective libraries. These are essential for setting up and managing the database connection.\n\n3. **Client Creation**: `createClient` is used to establish a connection to the SQLite database. It uses the `DB_FILE_NAME` environment variable to locate the database file.\n\n4. **Drizzle ORM Initialization**: The `drizzle` function is called with the client as a parameter, which initializes the ORM, allowing for interaction with the database through a structured, object-oriented approach.\n\n### Important Notes\n- Ensure that the `DB_FILE_NAME` is properly set in your environment variables to avoid connection issues.\n- This setup is specific to TypeScript projects using SQLite with Drizzle ORM. Other database systems may require different configurations.\n\n### References\n- [Drizzle ORM Documentation](https://orm.drizzle.team/)\n- [Node.js dotenv Documentation](https://www.npmjs.com/package/dotenv)\n\n### Common Use Cases\n- Rapid prototyping with a lightweight SQLite database.\n- Projects requiring an easily configurable local database solution for testing or development.\n\n### Variations\n- Modifying the client to include additional options, such as logging or connection pooling, based on project requirements.\n",
      "ruleTitle": "Connecting to SQLite with Drizzle ORM in TypeScript"
    },
    {
      "reasoning": "This rule is important because it provides a practical guide to using Drizzle ORM with SQLite in an existing project. It demonstrates basic database operations such as inserting, updating, selecting, and deleting data. Understanding these operations is crucial for anyone looking to manage SQLite databases effectively with Drizzle ORM.",
      "ruleFile": "# Using Drizzle ORM with SQLite in an Existing Project\n\n## Introduction\n\nThis guide demonstrates how to integrate Drizzle ORM with SQLite, showing key database operations such as creating, reading, updating, and deleting records.\n\n## Code Snippet\n\n```typescript\nimport 'dotenv/config';\nimport { drizzle } from 'drizzle-orm/libsql';\nimport { eq } from 'drizzle-orm';\nimport { usersTable } from './db/schema';\n\nconst db = drizzle(process.env.DB_FILE_NAME!);\n\nasync function main() {\n  const user: typeof usersTable.$inferInsert = {\n    name: 'John',\n    age: 30,\n    email: '[email protected]',\n  };\n\n  await db.insert(usersTable).values(user);\n  console.log('New user created!')\n\n  const users = await db.select().from(usersTable);\n  console.log('Getting all users from the database: ', users)\n  /*\n  const users: {\n    id: number;\n    name: string;\n    age: number;\n    email: string;\n  }[]\n  */\n\n  await db\n    .update(usersTable)\n    .set({\n      age: 31,\n    })\n    .where(eq(usersTable.email, user.email));\n  console.log('User info updated!')\n\n  await db.delete(usersTable).where(eq(usersTable.email, user.email));\n  console.log('User deleted!')\n}\n\nmain();\n```\n\n## Explanation\n\n1. **Setup**: Import the necessary modules, including dotenv for environment variables, and initialize the Drizzle ORM with your SQLite database file specified in `.env`.\n\n2. **Create**: Insert a new record into the `usersTable` and confirm creation.\n\n3. **Read**: Select and log all users from the `usersTable`.\n\n4. **Update**: Update specific user details using a WHERE clause for precision.\n\n5. **Delete**: Remove records by criteria, demonstrating a full CRUD cycle.\n\n## Important Notes\n\n- Ensure all environment variables, such as `DB_FILE_NAME`, are correctly configured.\n- Handle exceptions or errors that may occur during operations to maintain data integrity and stability.\n\n## References\n\n- [Drizzle ORM Documentation](https://orm.drizzle.team/docs/get-started/sqlite-existing)\n- SQLite and Drizzle ORM integration guide\n\n## Common Use Cases\n\n- Rapid prototyping with SQLite.\n- CRUD operations in lightweight applications.\n- Applications or scripts where portability of the database is beneficial.\n",
      "ruleTitle": "Basic CRUD Operations with Drizzle ORM and SQLite"
    },
    {
      "reasoning": "This rule demonstrates how to create a basic table in SQLite using the Drizzle ORM. It highlights how to define primary keys, data types, and constraints to ensure database integrity and uniqueness. This pattern is essential for managing structured data effectively within a database.",
      "ruleFile": "# Creating a Table with Drizzle and SQLite\n\n## Description\nThis snippet demonstrates how to create a `users_table` in SQLite using the Drizzle ORM. The table captures essential user information and enforces data integrity through constraints.\n\n## Code Snippet\n```typescript\nCREATE TABLE `users_table` (\n  `id` integer PRIMARY KEY AUTOINCREMENT NOT NULL,\n  `name` text NOT NULL,\n  `age` integer NOT NULL,\n  `email` text NOT NULL UNIQUE\n);\n```\n\n## Explanation\n- **`id` field**: An integer that serves as the primary key and automatically increments for each new record, ensuring a unique identifier for each user.\n- **`name` field**: A non-null text field that records the user's name.\n- **`age` field**: A non-null integer field that stores the user's age.\n- **`email` field**: A non-null text field with a unique constraint to ensure no duplicate emails are entered.\n\n## Important Notes\n- Defining a primary key with `AUTOINCREMENT` helps maintain a unique identity for each record.\n- The `UNIQUE` constraint on the `email` field is essential for maintaining user uniqueness and preventing duplicate email entries.\n\n## References\n- [Drizzle ORM - Get Started with SQLite](https://orm.drizzle.team/docs/get-started/sqlite-existing)\n- [SQLite Documentation](https://www.sqlite.org/docs.html)\n\n## Use Cases and Variations\n- This table structure is ideal for managing user data in applications such as web apps, user management systems, or any platform requiring user registration and authentication.\n- Variations may include adding fields like `created_at` for timestamps, `password` for authentication purposes, or `role` for user permissions management.\n",
      "ruleTitle": "Creating a User Table in SQLite with Drizzle"
    }
  ]
}
